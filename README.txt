******Implemented in September 2016 originally in Python 2.7******

Programming of Fully Connected Neural Network from scratch using Python 3.
Only library used is numpy for matrix multiplication.
Environment used : Enthought Canopy IDE


This code was written as a part of my BE project which involved programming of neural
network with application in Microstrip antennas.
This is my first major piece of code in Python (initially written in Python 2.7)

The aim of coding a neural network from scratch is to enhance the understanding of 
various elements of neural networks, such as:
1..Layer by layer feedforward computation.
2..Understanding the use of loss functions
3..Backpropagation of Error using Gradient Descent
4..Effect of hyperparameters on training of the network

The code is fully functional and operations have been vectorized as and when possible.
However, the code does not implement multithreading or exploiting GPU resources, hence 
will run much slower than the ML libraries' implementation of Neural Network.

Input to network : (Example)
Number of neurons in input, hidden(s) and ouput layer : [4,8,4,1] (Number of layers in network implicit by length of list, first and last entry are number of i/p and o/p nodes respectively)
Sigmoidal gain, threshold, learning rate and momentum factor : [1,0,0.6,0.9 (Hyperparameter initialization)]
Use augmented backpropagation? 1-Yes 0-No : 0 (0 indicates traditional FC Neural Network)
Max limit on epochs : 10,000 

Output of Program :
Weights of the network given as numpy matrices

Prediction :
type "verify(0)" in the python console.
Enter the input values as specified above according to the prompts
Output is predicted values of the network.

SUGGESTED IMPROVEMENTS:

1. Accepting the input as .csv datafile, by using pandas
2. pickling the weights of the network for future use, by using pickle
3. Visualizing training graph, by plotting Error (defined in code as variable "Error") against epoch. 
   Error variable is generated by computing total error for a given epoch by summing error across all iterations. This is appended to the variable for every 1000th epoch. 
   Suggested to use matplotlib.pyplot for visualization.

